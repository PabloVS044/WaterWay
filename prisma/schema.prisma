// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  researcher
  moderator
  admin
  company
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique @db.VarChar(100)
  password   String    @db.VarChar(100)
  name       String    @db.VarChar(100)
  last_name  String    @db.VarChar(100)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime? // Soft-delete
  role       Role      @default(user)

  companies            Company[]              @relation("CompanyOwner")
  events_created       Event[]                @relation("EventCreator")
  reports_created      Contamination_Report[] @relation("ReportCreator")
  publications         Publication[]          @relation("PublicationCreator")
  event_participations Event_Participant[]

  @@map("users")
}

model Company {
  id          String    @id @default(uuid())
  owner_id    String
  name        String    @db.VarChar(100)
  description String?   @db.VarChar(400)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  owner  User            @relation("CompanyOwner", fields: [owner_id], references: [id], onDelete: NoAction)
  images Company_Image[]

  @@map("companies")
}

model Company_Image {
  id          String   @id @default(uuid())
  company_id  String
  image_key   String   @db.VarChar(200)
  uploaded_at DateTime @default(now())

  company Company @relation(fields: [company_id], references: [id], onDelete: NoAction)

  @@map("company_images")
}

model Event {
  id          String    @id @default(uuid())
  title       String    @db.VarChar(200)
  description String    @db.VarChar(2000)
  date_start  DateTime
  date_end    DateTime?
  location    String?   @db.VarChar(300)
  status      String    @default("active") @db.VarChar(50)
  created_by  String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  creator      User                @relation("EventCreator", fields: [created_by], references: [id], onDelete: NoAction)
  images       Event_Image[]
  participants Event_Participant[]

  @@map("events")
}

model Event_Image {
  id          String   @id @default(uuid())
  event_id    String
  image_key   String   @db.VarChar(200)
  uploaded_at DateTime @default(now())

  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)

  @@map("event_images")
}

model Event_Participant {
  id               String   @id @default(uuid())
  event_id         String
  user_id          String
  inscription_date DateTime @default(now())

  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("event_participants")
}

model Contamination_Report {
  id          String    @id @default(uuid())
  title       String    @db.VarChar(200)
  description String    @db.VarChar(200)
  lat         Float
  lng         Float
  status      String    @default("pending") @db.VarChar(50)
  created_by  String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  creator User                  @relation("ReportCreator", fields: [created_by], references: [id], onDelete: NoAction)
  images  Contamination_Image[]

  @@map("contamination_reports")
}

model Contamination_Image {
  id               String   @id @default(uuid())
  contamination_id String
  image_key        String   @db.VarChar(200)
  uploaded_at      DateTime @default(now())

  report Contamination_Report @relation(fields: [contamination_id], references: [id], onDelete: NoAction)

  @@map("contamination_images")
}

model Publication {
  id         String    @id @default(uuid())
  title      String    @db.VarChar(200)
  content    String    @db.VarChar(2000)
  created_by String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  author User @relation("PublicationCreator", fields: [created_by], references: [id], onDelete: NoAction)

  @@map("publications")
}
